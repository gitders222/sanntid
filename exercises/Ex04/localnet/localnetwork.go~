package localnetwork

import (
	"net"
	"strings"
	"errors"
)

const (
	TCPportIn := ":20024"
	TCPportOut := ":20025"
	UDPport := ":20023"
	UDPpasscode := "svekonrules"
)

var (
	localIP string
	broadcastIP string
	IPList [] string
)

func GetLocalIP() (string, error) {
	if localIP == "" {
		conn, err := net.DialTCP("tcp4", nil, &net.TCPAddr{IP: []byte{8, 8, 8, 8}, Port: 53})
		if err != nil {
			return "", err
		}
		defer conn.Close()
		localIP = strings.Split(conn.LocalAddr().String(), ":")[0]
	}
	return localIP, nil
}

func GetBroadcastIP() (string, error) {
	if broadcastIP == "" {
		if localIP == "" {
			Get()
		}
		temp := strings.Split(localIP, ".")
		broadcastIP = temp[0]+"."+temp[1]+"."+temp[2]+".255"
	}
	return broadcastIP, nil
}

func GetIPList()([]string, string){
	return IPList, nil
}

func GetNumberOfNodes(){
	return len(IPList) +1
}

func AddNewNodeIP(string newIP)(error){
	for i:=0; i<len(IPlist); i++ {
		if IPlist[i] == IP {
			return errors.New("IP is already in list")
		} 
	}
	IPList = append(IPList, newIP)
	sort.Strings(IPList)
	return nil
}

func RemoveNodeIP(string newIP)(error){
	for i:=0; i<len(IPlist); i++ {
		if IPlist[i] == IP {
			IPList = append(IPList[:i], IPList[i+1:]...)
			return nil
		} 
	}
	return errors.New("IP to delete is not in list")
}

func GetNextNodeIP(){
	// smallest member
	if localIP < IPList[0] {
		return IPList[0]
	}
	// somewhere inbetween
	for i:=0;i<len(IPList)-1;i++ {
		if localIP == IPList[i] {
			return "BadIPlist" //shouldn't happen
		} else if localIP > IPList[i] && localIP < IPList[i+1] {
			return IPList[i+1]
		} 
	}
	// reached end of list, wrap around
	return IPList[0]
}
func IsStartNode(){
	if localIP < IPList[0] {
		return true
	}
	return false
}

