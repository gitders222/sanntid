package heisdriver

import (
	_"fmt"
	_"errors"
)

const N_FLOORS = 4
const N_BUTTONS = 3
const MOTOR_SPEED = 2800

var lampChannelMatrix = [N_FLOORS][N_BUTTONS] int {
    {LIGHT_UP1, LIGHT_DOWN1, LIGHT_COMMAND1},
    {LIGHT_UP2, LIGHT_DOWN2, LIGHT_COMMAND2},
    {LIGHT_UP3, LIGHT_DOWN3, LIGHT_COMMAND3},
    {LIGHT_UP4, LIGHT_DOWN4, LIGHT_COMMAND4},
}


var buttonChannelMatrix = [N_FLOORS][N_BUTTONS] int {
    {BUTTON_UP1, BUTTON_DOWN1, BUTTON_COMMAND1},
    {BUTTON_UP2, BUTTON_DOWN2, BUTTON_COMMAND2},
    {BUTTON_UP3, BUTTON_DOWN3, BUTTON_COMMAND3},
    {BUTTON_UP4, BUTTON_DOWN4, BUTTON_COMMAND4},
}



type elevMotorDirection int
const (
	DIRN_DOWN  elevMotorDirection = -1 << iota 
    DIRN_STOP
    DIRN_UP 
)


type elevButtonType int
const ( 
	BUTTON_CALL_UP elevButtonType = iota
    BUTTON_CALL_DOWN
    BUTTON_COMMAND
)




func elevSetMotorDirection(dirn elevMotorDirection ) {
    if dirn == DIRN_STOP{
        ioWriteAnalog(MOTOR, 0);
    } else if dirn > 0 {
        ioClearBit(MOTORDIR);
        ioWriteAnalog(MOTOR, MOTOR_SPEED);
    } else if dirn < 0 {
        ioSetBit(MOTORDIR);
        ioWriteAnalog(MOTOR, MOTOR_SPEED);
    }
}

func elevSetButtonLamp(button int ,  floor int,  value int) {
    //assert(floor >= 0);
    //assert(floor < N_FLOORS);
    //assert(button >= 0);
    //assert(button < N_BUTTONS);

    if value != 0 {
        ioSetBit(lampChannelMatrix[floor][button]);
    } else {
        ioClearBit(lampChannelMatrix[floor][button]);
    }
}

func elevSetFloorIndicator(floor int) {
    //assert(floor >= 0);
    //assert(floor < N_FLOORS);

    // Binary encoding. One light must always be on.
    if floor == 0x02 {
        ioSetBit(LIGHT_FLOOR_IND1);
    } else {
        ioClearBit(LIGHT_FLOOR_IND1);
    }    

    if floor == 0x01 {
        ioSetBit(LIGHT_FLOOR_IND2);
    } else {
        ioClearBit(LIGHT_FLOOR_IND2);
    }    
}

func elevSetDoorOpenLamp(value bool) {
    if value {
        ioSetBit(LIGHT_DOOR_OPEN);
    } else {
        ioClearBit(LIGHT_DOOR_OPEN);
    }
}

func elevSetStopLamp(value bool) {
    if value {
        ioSetBit(LIGHT_STOP);
    } else {
        ioClearBit(LIGHT_STOP);
    }
}

func elevGetButtonSignal(button elevButtonType, floor int) int{
    //assert(floor >= 0);
    //assert(floor < N_FLOORS);
    //assert(button >= 0);
    //assert(button < N_BUTTONS);


    return ioReadBit(buttonChannelMatrix[floor][button]);
}

func elevGetFloorSensorSignal()int {
    if ioReadBit(SENSOR_FLOOR1) == 1{
        return 0
    } else if ioReadBit(SENSOR_FLOOR2) == 1 {
        return 1
    } else if ioReadBit(SENSOR_FLOOR3) == 1 {
        return 2
    } else if ioReadBit(SENSOR_FLOOR4) == 1 {
        return 3
    } else {
        return -1
    }
}

func elevGetStopSignal()int {
    return ioReadBit(STOP);
}


func elevGetObstructionSignal() int{
    return ioReadBit(OBSTRUCTION);
}

func elevInit(){

	initSuccess := ioInit()
	_ = initSuccess

    //assert(init_success && "Unable to initialize elevator hardware!");

    for f := 0; f < N_FLOORS; f++ {
        for b := 0; b < N_BUTTONS; b++{            
			elevSetButtonLamp(b, f, 0)
        }
    }

    elevSetStopLamp(false)
    elevSetDoorOpenLamp(false)
    elevSetFloorIndicator(0x00)

}
